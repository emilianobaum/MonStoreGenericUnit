#!/usr/bin/python3
# -*- coding: utf-8 -*-
"""
Loading configuration file and returns the values for each instance generated by the program.
"""
__author__ = "Emiliano A Baum"
__contact__ = "emilianobaum@gmail.com"
__copyrigth__ = "2017-11-29, Python Elasticsearch Storage Tool v0.2"
__license__ = "GPLv3"
__description__ = "Load cofiguration from setup file."

from json import load
import logging

logger = logging.getLogger('Py-ES Storage Tool.Configuration')

class ConfigData():
    """Extracts data from configuration files."""
    def load_file(self, file):
        """
        Load configuration file.
        """
        try:
            f = open(file)
            self.data = load(f)
            f.close()
            for unit, section in self.data.items():
                self.unit = unit
                self.section = []
                for n in section:
                    self.section.append(n)
            print("Open configuration file %s." % (file))
        except (IOError,OSError, ValueError) as e:
            logger.error(('Error reading configuration file -> %s. Error -> %s'
                           % (file, e)))
            pass
        return True

    def unit_description(self):
        data = (self.data['Py-ES Storage']["unit description"])
        
        self.unitName = data["name"]
        self.unitIp = data["ip"]
        self.unitPort = data["port"]
        self.unitSockTimeout= data["socket timeout"]
        self.unitType = data["type"]
        
        return True

    def elastic_data(self):
        """
        Data for Python ElasticSearch Storage Tool 
         module to connect with the cluster.
        """
        print("SELF DATA: ",(self.data['Py-ES Storage']["program configuration"]))
        data = (self.data['Py-ES Storage']["program configuration"])
        self.elasticName = data["cluster info"]["name"]
        self.elasticHost = data["cluster info"]["host"]
        self.elasticPort = data["cluster info"]["port"]
        self.elasticUser = data["cluster info"]["user"]
        self.elasticPassword = data["cluster info"]["passwd"]
        self.elasticIndex = data["index configuration"]["name"]
        self.elasticIndexType = data["index configuration"]["type"]
        self.elasticIndexTime = data["index configuration"]["time based"]
        self.elasticIndexTimeFormat = data["index configuration"]["time format"]
#         Replicas & Sharding
        self.elasticReplicas = data["index configuration"]["replicas"]
        self.elasticShards = data["index configuration"]["shards"]
#         Index definition
        self.elasticDefinition = data["index configuration"]["definition"]
        self.elasticFile = data["index configuration"]["definition"]
        

        return True

    def program_structure(self):
        """Creates directory and static files."""
        data = self.data['Py-ES Storage']["program configuration"]
        self.dirLog = data["structure"]["logs"][0]
        self.fileLog = data["structure"]["logs"][1]
        self.dirConf = data["structure"]["configurations"]
        self.dockerConf = data["structure"]["configurations"]
        self.indexConf = data["structure"]["index conf"]
        #return True

    def pyEsStorage_tool_server(self):
        """
        Creates directory and static files.
        """
        self.pyEsStorageHost = (self.data['Py-ES Storage']["socketoptions"]['host'])
        self.pyEsStorageAdminPort = (int(self.data['Py-ES Storage']
                                         ["socketoptions"]['admin port']))
        self.pylEsStorageSockAddrProt = (self.data['Py-ES Storage']["socketoptions"]
                               ['socket address protocol'])
        self.pyEsStorageSockType = (self.data['Py-ES Storage']["socketoptions"]
                              ['socket type'])
        self.pyEsStorageSockBlock = (self.data['Py-ES Storage']["socketoptions"]
                                 ['block'])
        self.pyEsStorageSockDataLength = (int(self.data['Py-ES Storage']["socketoptions"]
                                  ['data length']))
        self.pyEsStorageSockAceptConn = (int(self.data['Py-ES Storage']["socketoptions"]
                                           ['accept connections']))
        return True

    def server_configuration(self):
        data = (self.data['Py-ES Storage']["program configuration"])
        self.srvrHost = data["data server"]["host"]
        self.srvrPort = data["data server"]["port"]
        self.srvrListen = data["data server"]["listen"]
        
    def __init__(self, file):
        
        self.load_file(file)
        self.program_structure()
        self.elastic_data()
        self.unit_description()
        self.server_configuration()
        